# stages:
#   - build
#   - deploy

# variables:
#   IMAGE_TAG: latest

# before_script:
#   - apk add --no-cache python3 py3-pip
#   - pip3 install --upgrade pip
#   - pip3 install awscli

# build:
#   stage: build
#   image: docker:20.10.17
#   services:
#     - docker:20.10.17-dind
#   script:
#     - python3 -m venv venv
#     - source venv/bin/activate
#     - aws ecr get-login-password --region $AWS_DEFAULT_REGION
#     - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
#     - docker build -t raygun3491/s3upload:$IMAGE_TAG .
#     - docker push raygun3491/s3upload:$IMAGE_TAG
#   only:
#     - main

# deploy:
#   stage: deploy
#   image: python:3.8-alpine
#   script:
#     - pip install --upgrade awscli
#     - aws ecs update-service --cluster $CI_AWS_ECS_CLUSTER --service $CI_AWS_ECS_SERVICE --force-new-deployment
#   only:
#     - main

stages:
  - build
  - test
  - docker
  - deploy

###################
### Build stage ###
###################
backend-build:
  stage: build
  image: node
  script:
    - echo "Start building backend"
    - npm install
    - echo "Build backend successfully!"
  cache:
    paths:
      - node_modules/
  artifacts:
    paths:
      - build/
      - node_modules/
  only:
    - main
    - develop

##################
### Test stage ###
##################
backend-test:
  stage: test
  image: node
  script:
    - echo "Start testing backend"
    - npm run test
    - echo "Test backend successfully!"
  only:
    - main
    - develop

####################
### Docker stage ###
####################
backend-docker:
  stage: docker
  image: docker:stable
  services:
    - docker:dind
  script:
    - echo "Start building docker"
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - docker build -t raygun3491/s3upload:latest .
    - docker push raygun3491/s3upload:latest
    - echo "Building docker successfully!"
  only:
    - main

####################
### Deploy stage ###
####################
backend-deploy:
  stage: deploy
  image: gitlab/dind:latest
  before_script:
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)

    ##
    ## Give the right permissions, otherwise ssh-add will refuse to add files
    ## Add the SSH key stored in SSH_PRIVATE_KEY file type CI/CD variable to the agent store
    ##
    - chmod 400 "$SSH_PRIVATE_KEY"
    - ssh-add "$SSH_PRIVATE_KEY"

    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - set -x
    - |
      ssh ${GCE_LOGIN_USER}@${GCP_VM_HOST} "
        docker images && \
        docker ps -a || exit 1
      "
    - |
      ssh ${GCE_LOGIN_USER}@${GCP_VM_HOST} "
        docker compose down || true
      "
    - |
      ssh ${GCE_LOGIN_USER}@${GCP_VM_HOST} "
        docker compose up -d || exit 1
      "
    - |
      ssh ${GCE_LOGIN_USER}@${GCP_VM_HOST} "
      docker image prune -f || true
      "
  only:
    - main
